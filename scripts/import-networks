#!/bin/bash

set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline

TODAY=$(date "+%Y-%m-%d")
NETWORK="all"

function scrape_hulu() {
    echo "Scraping hulu"

    cd scraper/hulu/changes
    yarn && yarn run main

    cd ../../../
}

function scrape_hbo() {
    echo "Scraping HBO"

    cd scraper/hbo/whats-new
    yarn && yarn run main

    cd ../../../
}

function scrape_netflix() {
    echo "Scraping unogs"

    cd scraper/unogs
    yarn && yarn run main

    cd ../netflix
    yarn && yarn run main

    cd ../../
}

function ingest_hulu() {
    cd scala-server
    sbt "server/runMain com.teletracker.service.tools.IngestHuluChanges -input=../scraper/hulu/changes/${TODAY}-hulu-changes.json"
    cd ../
}

function ingest_hbo() {
    cd scala-server
    sbt "server/runMain com.teletracker.service.tools.IngestHboChanges -input=../scraper/hbo/whats-new/${TODAY}-hbo-changes.json"
    cd ..
}

function ingest_netflix() { 
    cd scala-server
    sbt "server/runMain com.teletracker.service.tools.IngestUnogsNetflixExpiring -input=../scraper/unogs/${TODAY}-netflix-expiring.json"
    cd ..
}

# DESC: Usage help
# ARGS: None
# OUTS: None
function script_usage() {
    cat << EOF
Usage:
     -h|--help                  Displays this help
     -v|--verbose               Displays verbose output
    -nc|--no-colour             Disables colour output
     -a|--all                   Scrapes and processes all networks
     --netflix                  Scrapes and processes Netflix
     --hulu                     Scrapes and processes Hulu
     --hbo                      Scrapes and processes HBO
EOF
}

# DESC: Parameter parser
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: Variables indicating command-line parameters and options
function parse_params() {
    local param
    while [[ $# -gt 0 ]]; do
        param="$1"
        shift
        case $param in
            -h|--help)
                script_usage
                exit 0
                ;;
            -v|--verbose)
                verbose=true
                ;;
            -nc|--no-colour)
                no_colour=true
                ;;
            -a|--all)
                NETWORK="all"
                ;;
            --hbo)
                NETWORK="hbo"
                ;;
            --netflix)
                NETWORK="netflix"
                ;;
            --hulu)
                NETWORK="hulu"
                ;;
            *)
                script_exit "Invalid parameter was provided: $param" 2
                ;;
        esac
    done
}


function main() {
    source "$(dirname "${BASH_SOURCE[0]}")/source.sh"

    trap script_trap_err ERR
    trap script_trap_exit EXIT

    script_init "$@"
    parse_params "$@"
    cron_init
    colour_init

    echo "Ingesting scraped info for ${NETWORK}..."

    case $NETWORK in
        "netflix")
            scrape_netflix
            ingest_netflix
            ;;
        "hbo")
            scrape_hbo
            ingest_hbo
            ;;
        "hulu")
            scrape_hulu
            ingest_hulu
            ;;
        "all")
            scrape_netflix
            scrape_hbo
            scrape_hulu

            ingest_netflix
            ingest_hbo
            ingest_hulu
            ;;
    esac
}


# Make it rain
main "$@"